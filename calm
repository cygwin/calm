#!/usr/bin/env python3
#
# Copyright (c) 2015 Jon Turney
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

#
# calm - better than being upset
#

#
# read packages from release area
# for each maintainer
# - read and validate any package uploads
# - build a list of files to move and remove
# - merge package sets
# - validate merged package set
# - process remove list
# - on failure
# -- mail maintainer with errors
# -- empty move list
# -- discard merged package set
# - on success
# -- process move list
# -- mail maintainer with movelist
# -- continue with merged package set
# write setup.ini file
#

import argparse
import logging
import os
import sys

import common_constants
import maintainers
import package
import uploads


#
#
#

def main(args):
    # build package list
    packages = package.read_packages(args.rel_area, args.arch)

    # validate the package set
    if not package.validate_packages(args, packages):
        logging.error("existing package set has errors, not processing uploads or writing setup.ini")
        return

    # read maintainer list
    mlist = maintainers.Maintainer.read(args)

    # make the list of all packages
    all_packages = maintainers.Maintainer.all_packages(mlist)

    # for each maintainer
    for name in sorted(mlist.keys()):
        m = mlist[name]

        # XXX: wrap this in a 'mail logs' container
        # XXX: but only want to send one mail per run to leads

        (error, mpackages, move, remove_always, remove_success) = uploads.scan(m, all_packages, args)

        uploads.remove(args, remove_always)

        if not error:
            merged_packages = package.merge(packages, mpackages)

            # validate the package set
            if package.validate_packages(args, merged_packages):
                # process the move list
                uploads.move(m, args, move)
                uploads.remove(args, remove_success)
                # use merged package list
                packages = merged_packages
            else:
                # otherwise we discard move list and merged_packages
                logging.error("error while merging uploads for %s" % (name))

    # write setup.ini
    package.write_setup_ini(args, packages)

#
#
#

if __name__ == "__main__":
    homedir_default = common_constants.HOMEDIR
    orphanmaint_default = common_constants.ORPHANMAINT
    pkglist_default = common_constants.PKGMAINT
    relarea_default = common_constants.FTP

    parser = argparse.ArgumentParser(description='Upset replacement')
    parser.add_argument('--arch', action='store', required=True, choices=common_constants.ARCHES)
    parser.add_argument('--email', action='store', dest='email', nargs='?', const=common_constants.EMAILS, help='email output to maintainer and ADDRS (default: ' + common_constants.EMAILS + ')', metavar='ADDRS')
    parser.add_argument('--homedir', action='store', metavar='DIR', help="maintainer home directory (default: " + homedir_default + ")", default=homedir_default)
    parser.add_argument('--inifile', '-u', action='store', help='output filename', required=True)
    parser.add_argument('--orphanmaint', action='store', metavar='NAMES', help="orphan package maintainers (default: '" + orphanmaint_default + "')", default=orphanmaint_default)
    parser.add_argument('--pkglist', action='store', metavar='FILE', help="package maintainer list (default: " + pkglist_default + ")", default=pkglist_default)
    parser.add_argument('--release', action='store', help='value for setup-release key (default: cygwin)', default='cygwin')
    parser.add_argument('--releasearea', action='store', metavar='DIR', help="release directory (default: " + relarea_default + ")", default=relarea_default, dest='rel_area')
    parser.add_argument('--setup-version', action='store', metavar='VERSION', help='value for setup-version key')
    parser.add_argument('-n', '--dry-run', action='store_true', dest='dryrun', help="don't do anything")
    parser.add_argument('-v', '--verbose', action='count', dest='verbose', help='verbose output')
    (args) = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.INFO)

    logging.basicConfig(format=os.path.basename(sys.argv[0])+': %(message)s')

    if args.email:
        args.email = args.email.split(',')

    main(args)
