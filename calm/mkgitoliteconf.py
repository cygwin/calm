#!/usr/bin/env python3
#
# Copyright (c) 2017 Jon Turney
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

#
# mkgitoliteconf - creates a gitolite conf file fragment from cygwin-pkg-maint
#

import argparse
import sys

from . import common_constants
from . import maintainers


#
# transform username to charset acceptable to gitolite
#


def transform_username(name):
    name = name.replace('.', '')
    name = name.replace(' ', '_')
    return name


#
#
#

def do_main(args):
    # Get per-package list of maintainers
    pkgs = maintainers.pkg_list(args.pkglist)

    # header
    print("# automatically generated by mkgitoliteconf")

    # global configuration
    print('')
    print('@leads = %s' % ' '.join(map(transform_username, common_constants.TRUSTEDMAINT.split('/'))))
    print('')
    print('repo @all')
    print('    RW = @leads')
    print('    RW+ playground$ = @all')
    print('# anyone can create, push, rewind or delete the \'playground\' branch')
    print('    R  = @all')
    print('    R  = gitweb daemon')
    print('    config core.sharedrepository = all')
    print('    config uploadpack.allowReachableSHA1InWant = true')
    print('    config receive.advertisePushOptions = true')
    print('    - VREF/MAX_NEWBIN_SIZE/1024 = @all')
    print('# this rejects binary files over the size limit, text files of any size are still permiited')
    print('    - VREF/HIGHLANDER/cygport = @all')
    print('# this checks for trees which contain more than one .cygport file')
    print('')

    # for each package
    for p in sorted(pkgs):
        pkg = pkgs[p]

        users = ' '.join(map(transform_username, [m for m in pkg.maintainers() if m != 'ORPHANED']))

        owner = ''
        if pkg.maintainers():
            owner = pkg.maintainers()[0]  # first named maintainer

        if pkg.is_orphaned():
            owner = 'ORPHANED'

        print("repo git/cygwin-packages/%s" % (p))
        print("C  = %s @leads" % (users))
        if users:
            print("RW master$ = %s" % (users))
            print("RW refs/tags/ = %s" % (users))
        if owner:
            print("owner = %s" % (owner))
        print("")


#
#
#

def main():
    pkglist_default = common_constants.PKGMAINT

    parser = argparse.ArgumentParser(description='gitolite rules config generator')
    parser.add_argument('--pkglist', action='store', metavar='FILE', help="package maintainer list (default: " + pkglist_default + ")", default=pkglist_default)
    (args) = parser.parse_args()

    do_main(args)

    return 0


#
#
#

if __name__ == "__main__":
    sys.exit(main())
