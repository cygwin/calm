#!/usr/bin/env python3
#
# re-implementation of mkpkgdir script in python
# intended to be run from crontab every 5 minutes
#

import grp
import os
import pwd
import re
import sys

from collections import defaultdict

# XXX: make these command line options, with defaults
HOMEDIRS='/sourceware/cygwin-staging/home'
#PKGMAINT='/www/sourceware/htdocs/cygwin/cygwin-pkg-maint'
PKGMAINT='cygwin-pkg-maint'

# these maintainers can upload orphaned packages as well
ORPHANMAINT="default"

# XXX: add verbose option

#cygwin_uid = pwd.getpwnam('cygwin').pw_uid
#cygstage_gid = grp.getgrnam('cygstage').gr_gid
cygwin_uid = pwd.getpwnam('jon').pw_uid
cygstage_gid = grp.getgrnam('None').gr_gid

maintainers = defaultdict(list)

# set default umask of 0
os.umask(0)

# get the list of existing maintainer directories
for m in os.listdir(HOMEDIRS):
    maintainers[m] = []

# add maintainers from the package maintainers list, with the packages they maintain
with open(PKGMAINT) as fd:
    for (i, l) in enumerate(fd):
        l = l.rstrip()

        # match lines of the form '<package> <maintainer(s)>'
        match = re.match(r'^(\S+)\s+(.+)$', l)
        if match:
            pkg = match.group(1)
            m0 = match.group(2)

            # orphaned packages get the default maintainer
            # XXX: or can be ignored?
            if m0.startswith('ORPHANED'):
                m0 = ORPHANMAINT

            # ensure any metacharacters in pkg are escaped
            pkg = re.escape(pkg)

            # joint maintainers are separated by '/'
            for m in m0.split('/'):
                maintainers[m].append(pkg)

        else:
            print("%s: unrecognized line in %s:%d: '%s'" % (sys.argv[0], PKGMAINT, i, l))

# create or suggest removal for each maintainer directory
for m in sorted(maintainers.keys()):
    dir = os.path.join(HOMEDIRS, m)

    # if the path exists, but isn't a directory
    if os.path.exists(dir) and not os.path.isdir(dir):
        print("%s: %s exists and isn't a directory!" % (sys.argv[0], dir))
        continue

    pkgs = maintainers[m]

    # ensure the upload directory exists, with appropriate permissions, owner and contents
    os.makedirs(dir, exist_ok=True)
    os.chown(dir, cygwin_uid, cygstage_gid)
    os.chmod(dir, 0o2775)
    with open(os.path.join(dir, '!packages'), 'w') as fd:
        os.fchown(fd.fileno(), cygwin_uid, cygstage_gid)
        print('|'.join(pkgs), file=fd)
    for subdir in ['x86', 'x86_64' ]:
        os.makedirs(os.path.join(dir, subdir, 'release'), exist_ok=True)
        os.chown(os.path.join(dir, subdir, 'release'), cygwin_uid, cygstage_gid)

    defunct = os.path.join(dir, '!defunct')

    if len(pkgs) == 0:
        # if they have no packages, suggest removing their upload directory (once)
        if not os.path.exists(defunct):
            print("%s: defunct maintainer %s.  Remove their directory?" % (sys.argv[0], m))
            open(defunct, 'w').close()
    else:
        # remove defunct marker if no longer defunct
        if os.path.exists(defunct):
            os.unlink(defunct)
