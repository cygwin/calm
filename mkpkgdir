#!/usr/bin/env python3
#
# re-implementation of mkpkgdir script in python
# intended to be run from crontab every 5 minutes
#

import os
import grp
import pwd

import maintainers

# these maintainers can upload orphaned packages as well
ORPHANMAINT="default"

# XXX: add verbose option

#cygwin_uid = pwd.getpwnam('cygwin').pw_uid
#cygstage_gid = grp.getgrnam('cygstage').gr_gid
cygwin_uid = pwd.getpwnam('jon').pw_uid
cygstage_gid = grp.getgrnam('None').gr_gid

# set default umask of 0
os.umask(0)

# create maintainer list
maintainers.add_maintainer_directories()
maintainers.add_maintainer_packages(orphanMaint=ORPHANMAINT)

# create or suggest removal for each maintainer directory
for name in sorted(maintainers.Maintainer.keys()):
    m = maintainers.Maintainer.get(name)
    dir = m.homedir()

    # if the path exists, but isn't a directory
    if os.path.exists(dir) and not os.path.isdir(dir):
        print("%s: %s exists and isn't a directory!" % (sys.argv[0], dir))
        continue

    pkgs = m.pkgs

    # ensure the upload directory exists, with appropriate permissions, owner and contents
    os.makedirs(dir, exist_ok=True)
    os.chown(dir, cygwin_uid, cygstage_gid)
    os.chmod(dir, 0o2775)
    with open(os.path.join(dir, '!packages'), 'w') as fd:
        os.fchown(fd.fileno(), cygwin_uid, cygstage_gid)
        print('|'.join(pkgs), file=fd)
    for subdir in ['x86', 'x86_64' ]:
        os.makedirs(os.path.join(dir, subdir, 'release'), exist_ok=True)
        os.chown(os.path.join(dir, subdir, 'release'), cygwin_uid, cygstage_gid)

    defunct = os.path.join(dir, '!defunct')

    if len(pkgs) == 0:
        # if they have no packages, suggest removing their upload directory (once)
        if not os.path.exists(defunct):
            print("%s: defunct maintainer %s.  Remove their directory?" % (sys.argv[0], m))
            open(defunct, 'w').close()
    else:
        # remove defunct marker if no longer defunct
        if os.path.exists(defunct):
            os.unlink(defunct)
