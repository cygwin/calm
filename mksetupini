#!/usr/bin/env python3
#
# mksetupini
#

import argparse
import textwrap
import time

import common_constants
import package

#
#
#
#
#

def main(args):
    # build package list
    packages = package.read_packages(args.arch)

    # validate
    # assign a version to each stability level

    with open(args.inifile, 'w') as f:
        # write setup.ini header
        print(textwrap.dedent('''\
        # This file is automatically generated.  If you edit it, your
        # edits will be discarded next time the file is generated.
        # See http://cygwin.com/setup.html for details.
        #'''), file=f)

        if args.release:
              print("release: %s" % args.release, file=f)
        print("arch: %s" % args.arch, file=f)
        print("setup-timestamp: %d" % time.time(), file=f)
        if args.setup_version:
              print("setup-version: %s" % args.setup_version, file=f)

        # for each package
        for p in sorted(packages.keys(), key=package.sort_key):
            # do nothing if 'skip'
            if 'skip' in packages[p].hints:
                continue

            # XXX: all stability levels must exist

            # write package data
            print("@ %s" % p, file=f)

            # for historical reasons, we adjust sdesc slightly:
            #
            # - strip anything up to and including first ':'
            # - capitalize first letter
            #
            # these are both bad ideas, due to sdesc's which start with a
            # lower-case command name, or contain perl or ruby module names like
            # 'Net::HTTP'
            sdesc = packages[p].hints['sdesc']
            if ':' in sdesc:
                sdesc = sdesc.split(':', 1)[1]
            sdesc = sdesc[0].upper() + sdesc[1:]
            print("sdesc: %s" % sdesc, file=f)

            if 'ldesc' in packages[p].hints:
                print("ldesc: %s" % packages[p].hints['ldesc'], file=f)

            # XXX: all package listed in requires must exist
            if 'requires' in packages[p].hints:
                print("requires: %s" % packages[p].hints['requires'], file=f)

            # XXX: write lines for each version

            if 'message' in packages[p].hints:
                print("message: %s" % packages[p].hints['message'], file=f)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Make setup.ini')
    parser.add_argument('--setup-version' , action='store', metavar='VERSION', help='value for setup-version key')
    parser.add_argument('--release', action='store', help='value for setup-release key (default: cygwin)', default='cygwin')
    parser.add_argument('--arch', action='store', required=True, choices=common_constants.ARCHES)
    parser.add_argument('--inifile', '-u', action='store', help='output filename', required=True)
    (args) = parser.parse_args()

    main(args)
