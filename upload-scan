#!/usr/bin/env python3
#
# Copyright (c) 2015 Jon Turney
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

#
# check maintainer upload directories for files to move to release area
#
# - only process packages for which we are listed as a maintainer
# - only move things with an mtime earlier than the mtime of the !ready file
# - validate the syntax of the setup.ini file before moving anything
# - note if package file already exists in release area with identical contents
# - error if package file already exist in release area with different contents
# - remove !ready file
# - send a report on what we did to the maintainer and project leads
#

import argparse
import logging
import os
import sys

from buffering_smtp_handler import mail_logs
import common_constants
import maintainers
import uploads


#
#
#

def main(args):
    # create maintainer list
    mlist = maintainers.Maintainer.read(args)

    # make the list of all packages
    all_packages = maintainers.Maintainer.all_packages(mlist)

    for arch in common_constants.ARCHES:
        args.arch = arch

        for name in sorted(mlist.keys()):
            m = mlist[name]

            with mail_logs(args.email, toaddrs=(args.email or []) + m.email, subject='upset messages') as maint_email:

                # search for and validate uploaded packages
                (error, packages, move, remove_always, remove_success) = uploads.scan(m, all_packages, args)

                # always remove all the !ready files
                uploads.remove(args, remove_always)

                # but only move something if there were no errors
                if not error:
                    uploads.move_uploaded_packages(args, move)


#
#
#

if __name__ == "__main__":
    homedir_default = common_constants.HOMEDIR
    orphanmaint_default = common_constants.ORPHANMAINT
    pkglist_default = common_constants.PKGMAINT
    relarea_default = common_constants.FTP

    parser = argparse.ArgumentParser(description='Move files from maintainer upload directories to release area')
    parser.add_argument('--email', action='store', dest='email', nargs='?', const=common_constants.EMAILS, help='email output to maintainer and ADDRS (default: ' + common_constants.EMAILS + ')', metavar='ADDRS')
    parser.add_argument('--homedir', action='store', metavar='DIR', help="maintainer home directory (default: " + homedir_default + ")", default=homedir_default)
    parser.add_argument('--orphanmaint', action='store', metavar='NAMES', help="orphan package maintainers (default: '" + orphanmaint_default + "')", default=orphanmaint_default)
    parser.add_argument('--pkglist', action='store', metavar='FILE', help="package maintainer list (default: " + pkglist_default + ")", default=pkglist_default)
    parser.add_argument('--releasearea', action='store', metavar='DIR', help="release directory (default: " + relarea_default + ")", default=relarea_default, dest='rel_area')
    parser.add_argument('-n', '--dry-run', action='store_true', dest='dryrun', help="don't do anything")
    parser.add_argument('-v', '--verbose', action='count', dest='verbose', help='verbose output')
    (args) = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.INFO)

    logging.basicConfig(format=os.path.basename(sys.argv[0])+': %(message)s')

    if args.email:
        args.email = args.email.split(',')

    main(args)
